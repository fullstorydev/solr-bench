<!DOCTYPE html>
<html lang="eng">
<head>

<style>
%s
</style>
    <!-------Bootstrap----------------------------->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <!----------------------------------------------->

    <script type="text/javascript" src="https://www.google.com/jsapi"></script>

    <script type="text/javascript" src="https://www.google.com/jsapi"></script>

        <script type="text/javascript">
                google.charts.load('current', {packages: ['corechart', 'line']});
                google.charts.setOnLoadCallback(drawTrendlines);
        
                function allGraph(data){
                    for (var key in data) {
                        var keysAll = Object.keys(data[key]);
                        return keysAll;
                    }
                }
                function taskGraph(metrics_cluster_test, graphName, start, end){
                    $('.modal-body .graphs').append('<div id="'+graphName+'"></div>');
                    var metrics_data = new google.visualization.DataTable();
                    metrics_data.addColumn('number', 'X');
                    metrics_data.addColumn('number', 'Y');
                    for (var key in metrics_cluster_test) {
                        if(metrics_cluster_test[key][graphName]!=undefined){                
                            for (var i = 0; i < metrics_cluster_test[key][graphName].length; i++) {
                                if (metrics_cluster_test[key][graphName][i] != -1) {
                                    if (end == -1 || i*2>=start && i*2<=end) {
                                        row = [i*2,metrics_cluster_test[key][graphName][i]];
                                        metrics_data.addRow(row);
                                    }
                                }
                            }
                        }
                    }
                    var options = {
                        title: graphName
                    };
                    var metrics_chart = new google.visualization.LineChart(document.getElementById(graphName));
                    metrics_chart.draw(metrics_data, options);
                }
                function graph(metrics_cluster_test, graphName){
                    $('.modal-body .graphs').append('<div id="'+graphName+'"></div>');
                    var metrics_data = new google.visualization.DataTable();           
                    metrics_data.addColumn('number', 'X');
                    metrics_data.addColumn('number', 'Y');
                    for (var key in metrics_cluster_test) {
                        if(metrics_cluster_test[key][graphName]!=undefined){
                            for (var i = 0; i < metrics_cluster_test[key][graphName].length; i++){
                                if (metrics_cluster_test[key][graphName][i] != -1) {
                                    row = [i*2,metrics_cluster_test[key][graphName][i]];
                                    metrics_data.addRow(row);
                                }
                            }
                        }                
                    }
                    var options = {
                        title: graphName
                    };
                    var metrics_chart = new google.visualization.LineChart(document.getElementById(graphName));
                    metrics_chart.draw(metrics_data, options);
                }
                function drawTrendlines(metrics_cluster_test, start, end) {
                    if (metrics_cluster_test == undefined) return;
                    const clearGraphs = document.getElementById("graphs");
                    clearGraphs.innerHTML = '';
                    var graphs = allGraph(metrics_cluster_test);
                    var totalGraph = graphs.length;
                    for(var x=0; x < totalGraph; x++){
                        var graphName = graphs[x];
                        if(start && end){
                            console.log(graphName);
                            taskGraph(metrics_cluster_test, graphName, start, end);//for tasks
                        } else {
                            graph(metrics_cluster_test, graphName); 
                        }
                    }
                }
                ///////////////////////// Code for addTaskUI ///////////////////////
                function addTaskUI(results_cluster_test){
                    for (var key in results_cluster_test) {
                        var keyUpperCase = key.toUpperCase();
                        if(results_cluster_test[key].length!=0){
                            $(".tasks").append('<a href="#" class="list-group-item" id="'+key+'">'+keyUpperCase+'</a>');     
                        }
                    }
                }
                Object.size = function(obj) {
                  var size = 0,
                    key;
                  for (key in obj) {
                    if (obj.hasOwnProperty(key)) size++;
                  }
                  return size;
                };
                function findStartEnd(data, taskNum){
                    var start, end, obj;
                    for(key in data){
                        if(taskNum==key){
                            var tasksSize = Object.size(data[key]);
                            for(var key in data[taskNum]){
                                if(key==0){
                                    obj = data[taskNum][key];
                                    start = obj["start-time"];
                                }
                                if(key==tasksSize-1){
                                    obj = data[taskNum][key];
                                    end = obj["end-time"];
                                    break;
                                }
                            }
                        }
                    }
                    return [start, end];
                }
                var results_cluster_test,metrics_cluster_test;
                function plotStressModal(){
                    var commit = document.getElementById("branch_9x_metrics_button").value;
                    $.ajax({
                        type: 'GET',
                        url: "suites/results/cluster-test/results-"+commit+".json",
                        dataType: 'json',
                        async: false,
                        success: function (data) {
                           results_cluster_test = data;
                           addTaskUI(data);
                        }
                    });
                    //addTaskUI(results_cluster);
                    $.ajax({
                        type: 'GET',
                        url: "suites/results/cluster-test/metrics-"+commit+".json",
                        dataType: 'json',
                        async: false,
                        success: function (data) {
                           metrics_cluster_test=data;
                           drawTrendlines(data);
                        }
                    });
                }
                $(document).on('click', '.list-group-item', function () {
                    $('.active').removeClass("active");
                    $(this).addClass("active");
                    var startEnd = findStartEnd(results_cluster_test, $(this).attr('id'));     
                    var start = startEnd[0];
                    var end = startEnd[1];
                    drawTrendlines(metrics_cluster_test, start, end);
                });
                
            </script>
        
        
            <!--------------------------------------------------->
            


    <script type="text/javascript">

function drawAllCharts() {
    
    /*var charts = [
        [
            'Branch 9x', 'branch_9x', 'Commit date', 'Time (seconds)', [
                {type: 'date', id:'Commit date'},
                {type: 'number', id: 'task1'},
                {type: 'string', role:'tooltip'},
                {type: 'number', id: 'task2: heap-mb'},
                {type: 'string', role:'tooltip'},
                {type: 'number', id: 'task2: node-shutdown'},
                {type:'string', role:'tooltip'},
                {type: 'number', id: 'task2: node-startup'},
                {type:'string', role:'tooltip'},
                {type: 'number', id: 'task2'},
                {type:'string', role:'tooltip'}
            ],
            [ 
                [ new Date(2022, 11 - 1, 26, 08, 01, 0, 0), 230.071, '230.071: 6f6bff492f286dce274dc93c49ea169560b33908: SOLR-16420: {!mlt_content} accepting external content (#1045)', 3666.9723292759486, '3666.9723292759486: 6f6bff492f286dce274dc93c49ea169560b33908: SOLR-16420: {!mlt_content} accepting external content (#1045)', 16.579857142857144, '16.579857142857144: 6f6bff492f286dce274dc93c49ea169560b33908: SOLR-16420: {!mlt_content} accepting external content (#1045)', 67.07557142857142, '67.07557142857142: 6f6bff492f286dce274dc93c49ea169560b33908: SOLR-16420: {!mlt_content} accepting external content (#1045)', 372.279, '372.279: 6f6bff492f286dce274dc93c49ea169560b33908: SOLR-16420: {!mlt_content} accepting external content (#1045)', ],
                [ new Date(2022, 11 - 1, 26, 07, 59, 0, 0), 234.351, '234.351: 7f1d4ef1797af11dfe0fa56d26826c0d7c1ea382: Solr 16420 9x (#1195)', 3628.37166922433, '3628.37166922433: 7f1d4ef1797af11dfe0fa56d26826c0d7c1ea382: Solr 16420 9x (#1195)', 15.068857142857143, '15.068857142857143: 7f1d4ef1797af11dfe0fa56d26826c0d7c1ea382: Solr 16420 9x (#1195)', 73.68357142857143, '73.68357142857143: 7f1d4ef1797af11dfe0fa56d26826c0d7c1ea382: Solr 16420 9x (#1195)', 396.30800000000005, '396.30800000000005: 7f1d4ef1797af11dfe0fa56d26826c0d7c1ea382: Solr 16420 9x (#1195)', ],
                [ new Date(2022, 11 - 1, 24, 12, 44, 0, 0), 233.813, '233.813: c62e49f2426828bb8f0b0c6ceab9a73bfeec029c: Update search-process.png (#1180)', 3676.199005126953, '3676.199005126953: c62e49f2426828bb8f0b0c6ceab9a73bfeec029c: Update search-process.png (#1180)', 15.997428571428571, '15.997428571428571: c62e49f2426828bb8f0b0c6ceab9a73bfeec029c: Update search-process.png (#1180)', 72.88071428571429, '72.88071428571429: c62e49f2426828bb8f0b0c6ceab9a73bfeec029c: Update search-process.png (#1180)', 392.10999999999996, '392.10999999999996: c62e49f2426828bb8f0b0c6ceab9a73bfeec029c: Update search-process.png (#1180)', ],
                [ new Date(2022, 11 - 1, 22, 16, 11, 0, 0), 229.667, '229.667: a748189a6a8da6378e6f6def231c689f0bdf2a2f: SOLR-15955: Fix placing of slf4j-api jar in the lib/ext dir (#1178)', 3678.503171648298, '3678.503171648298: a748189a6a8da6378e6f6def231c689f0bdf2a2f: SOLR-15955: Fix placing of slf4j-api jar in the lib/ext dir (#1178)', 15.538714285714287, '15.538714285714287: a748189a6a8da6378e6f6def231c689f0bdf2a2f: SOLR-15955: Fix placing of slf4j-api jar in the lib/ext dir (#1178)', 68.89685714285714, '68.89685714285714: a748189a6a8da6378e6f6def231c689f0bdf2a2f: SOLR-15955: Fix placing of slf4j-api jar in the lib/ext dir (#1178)', 380.00499999999994, '380.00499999999994: a748189a6a8da6378e6f6def231c689f0bdf2a2f: SOLR-15955: Fix placing of slf4j-api jar in the lib/ext dir (#1178)', ],
                [ new Date(2022, 11 - 1, 22, 16, 11, 0, 0), 229.047, '229.047: d41598068ca40b35caf7d91a0b0804b4e0fb9268: SOLR-15955: Update Jetty dependency to 10 (#585)', 3648.550429207938, '3648.550429207938: d41598068ca40b35caf7d91a0b0804b4e0fb9268: SOLR-15955: Update Jetty dependency to 10 (#585)', 15.897285714285713, '15.897285714285713: d41598068ca40b35caf7d91a0b0804b4e0fb9268: SOLR-15955: Update Jetty dependency to 10 (#585)', 69.19685714285716, '69.19685714285716: d41598068ca40b35caf7d91a0b0804b4e0fb9268: SOLR-15955: Update Jetty dependency to 10 (#585)', 374.75, '374.75: d41598068ca40b35caf7d91a0b0804b4e0fb9268: SOLR-15955: Update Jetty dependency to 10 (#585)', ]
            ]
        ]
    ];*/

    var charts = [
%s
    ];

    for (const ch of charts)
        drawChart(ch[0], ch[1], ch[2], ch[3], ch[4], ch[5]);
}

function drawChart(title, element, xaxis, yaxis, branchColumns, branchRows) {
    var options = {
                title: title,
                hAxis: {
                    title: xaxis,
                    titleTextStyle: {
                    color: '#333'
                    },
                    //slantedText: true,
                    //slantedTextAngle: 80
                },
                vAxis: {
                    title: yaxis,
                    minValue: 0
                },
                explorer: {
                    actions: ['dragToZoom', 'rightClickToReset'],
                    axis: 'horizontal',
                    keepInBounds: true,
                    maxZoomIn: 4.0
                },
            };

    var data = new google.visualization.DataTable();
    
    // Add the columns
    for (const col of branchColumns) data.addColumn(col);  
    // Add the rows
    data.addRows(branchRows);
    
    // Instantiate and draw our chart, passing in some options.
    var chart = new google.visualization.ChartWrapper({
        chartType: 'LineChart',
        containerId: element,
        dataTable: data,
        options: /*{
            width: 600,
            height: 400
        }*/ options
    });
    
    // create columns array
    var columns = [0];
    /* the series map is an array of data series
     * "column" is the index of the data column to use for the series
     * "roleColumns" is an array of column indices corresponding to columns with roles that are associated with this data series
     * "display" is a boolean, set to true to make the series visible on the initial draw
     */
    var seriesMap = [];
    for (i=0; i<data.getNumberOfColumns()/2-1; i++) {
        var disp = true;
        if (branchColumns[i*2+1]["label"] == "task2: heap-mb" || (branchColumns[i*2+1]["label"]).indexOf("timings_") != -1) {
            disp = false;
        }
        var ser = {column: i*2+1, roleColumns: [i*2+2], display: disp};
        seriesMap.push(ser);
    }

    var columnsMap = {};
    var series = [];
    for (var i = 0; i < seriesMap.length; i++) {
        var col = seriesMap[i].column;
        columnsMap[col] = i;
        // set the default series option
        series[i] = {};
        if (seriesMap[i].display) {
            // if the column is the domain column or in the default list, display the series
            columns.push(col);
        }
        else {
            // otherwise, hide it
            columns.push({
                label: data.getColumnLabel(col),
                type: data.getColumnType(col),
                sourceColumn: col,
                calc: function () {
                    return null;
                }
            });
            // backup the default color (if set)
            if (typeof(series[i].color) !== 'undefined') {
                series[i].backupColor = series[i].color;
            }
            series[i].color = '#CCCCCC';
        }
        for (var j = 0; j < seriesMap[i].roleColumns.length; j++) {
            columns.push(seriesMap[i].roleColumns[j]);
        }
    }

    var view = chart.getView() || {};
    view.columns = columns;
    chart.setView(view);
    chart.draw();
    
    chart.setOption('series', series);
    
    function showHideSeries () {
        var sel = chart.getChart().getSelection();
        // if selection length is 0, we deselected an element
        if (sel.length > 0) {
            tooltip = branchRows[sel[0].row][sel[0].column+1]
            commit = tooltip.substring(tooltip.indexOf(":")+1, tooltip.indexOf(":", tooltip.indexOf(":") + 1));
            document.getElementById("branch_9x_metrics_button").value=commit.trim();

            // if row is undefined, we clicked on the legend
            if (sel[0].row == null) {
                var col = sel[0].column;
                if (typeof(columns[col]) == 'number') {
                    var src = columns[col];
                    
                    // hide the data series
                    columns[col] = {
                        label: data.getColumnLabel(src),
                        type: data.getColumnType(src),
                        sourceColumn: src,
                        calc: function () {
                            return null;
                        }
                    };
                    
                    // grey out the legend entry
                    series[columnsMap[src]].color = '#CCCCCC';
                }
                else {
                    var src = columns[col].sourceColumn;
                    
                    // show the data series
                    columns[col] = src;
                    series[columnsMap[src]].color = null;
                }
                var view = chart.getView() || {};
                view.columns = columns;
                chart.setView(view);
                chart.draw();
            }
        }
    }
    
    google.visualization.events.addListener(chart, 'select', showHideSeries);
    
    // create a view with the default columns
    var view = {
        columns: columns
    };
    chart.draw();
}

google.load('visualization', '1', {packages: ['corechart'], callback: drawAllCharts});

    </script>
    </head>

    <body>
%s

    <div id="branch_9x_buttons" class="text-center"> 
        <button type="button" value="" onclick="plotStressModal()" id="branch_9x_metrics_button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal">metrics</button>
        <!-- Modal -->
        <div id="myModal" class="modal fade" role="dialog">
            <div class="modal-dialog modal-lg">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Modal Header</h4>
                    </div>
                    <div class="modal-body" >
                        <div class="row">
                            <div  class="col-md-3">
                                <div class="list-group tasks">
                                    <a href="#" class="list-group-item active" id="all">All TASKS</a>
                                </div>
                            </div>
                            <div class="col-md-9 graphs" id="graphs">
                                <!----------charts------------------>    
                            </div>
                        </div>
                                                        
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    </body>
</html>

